"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.get('/', async () => {
    return { hello: 'world' };
});
Route_1.default.post('/auth/sign-up', 'AuthController.signUp');
Route_1.default.post('/auth/sign-in', 'AuthController.signIn');
Route_1.default.get('/auth/verify-email', 'AuthController.verifyEmail');
Route_1.default.get('/auth/verify-display-name', 'AuthController.verifyDisplayName');
Route_1.default.get('/posts', 'PostsController.list');
Route_1.default.get('/posts/:slug', 'PostsController.read');
Route_1.default.get('/posts/:slug/comments', 'CommentsController.list');
Route_1.default.get('/users/:displayName', 'UsersController.list');
Route_1.default.get('/users/:displayName/:slug', 'UsersController.read');
Route_1.default.group(() => {
    Route_1.default.get('/auth/verify-token', 'AuthController.verifyToken');
    Route_1.default.get('/me', 'MeController.getProfle');
    Route_1.default.patch('/me', 'MeController.updateProfle');
    Route_1.default.delete('/me', 'MeController.leave');
    Route_1.default.get('/me/posts', 'MeController.getPosts');
    Route_1.default.get('/me/posts/:slug', 'MeController.getPost');
    Route_1.default.post('/posts', 'PostsController.create');
    Route_1.default.patch('/posts/:slug', 'PostsController.update');
    Route_1.default.delete('/posts/:slug', 'PostsController.delete');
    Route_1.default.post('/posts/:slug/comments', 'CommentsController.create');
    Route_1.default.patch('/posts/:slug/comments/:id', 'CommentsController.update');
    Route_1.default.delete('/posts/:slug/comments/:id', 'CommentsController.delete');
    Route_1.default.patch('/comments/:id', 'CommentsController.update');
    Route_1.default.delete('/comments/:id', 'CommentsController.delete');
}).middleware('auth');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBb0JBLG9GQUEwQztBQUUxQyxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN4QixPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFBO0FBQzNCLENBQUMsQ0FBQyxDQUFBO0FBRUYsZUFBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsQ0FBQTtBQUNwRCxlQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFBO0FBQ3BELGVBQUssQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsNEJBQTRCLENBQUMsQ0FBQTtBQUM3RCxlQUFLLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLGtDQUFrQyxDQUFDLENBQUE7QUFFMUUsZUFBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsc0JBQXNCLENBQUMsQ0FBQTtBQUMzQyxlQUFLLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFBO0FBQ2pELGVBQUssQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUseUJBQXlCLENBQUMsQ0FBQTtBQUU3RCxlQUFLLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLHNCQUFzQixDQUFDLENBQUE7QUFDeEQsZUFBSyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxzQkFBc0IsQ0FBQyxDQUFBO0FBSTlELGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO0lBQ2YsZUFBSyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSw0QkFBNEIsQ0FBQyxDQUFBO0lBQzdELGVBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLHdCQUF3QixDQUFDLENBQUE7SUFDMUMsZUFBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsMkJBQTJCLENBQUMsQ0FBQTtJQUMvQyxlQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxDQUFBO0lBQ3pDLGVBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLHVCQUF1QixDQUFDLENBQUE7SUFDL0MsZUFBSyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxzQkFBc0IsQ0FBQyxDQUFBO0lBR3BELGVBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDLHdCQUF3QixDQUFDLENBQUE7SUFDN0MsZUFBSyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUMsd0JBQXdCLENBQUMsQ0FBQTtJQUNwRCxlQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBQyx3QkFBd0IsQ0FBQyxDQUFBO0lBRXJELGVBQUssQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsMkJBQTJCLENBQUMsQ0FBQTtJQUNoRSxlQUFLLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLDJCQUEyQixDQUFDLENBQUE7SUFDckUsZUFBSyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsRUFBRSwyQkFBMkIsQ0FBQyxDQUFBO0lBQ3RFLGVBQUssQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLDJCQUEyQixDQUFDLENBQUE7SUFDekQsZUFBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsMkJBQTJCLENBQUMsQ0FBQTtBQUU1RCxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IFJvdXRlc1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58XG58IFRoaXMgZmlsZSBpcyBkZWRpY2F0ZWQgZm9yIGRlZmluaW5nIEhUVFAgcm91dGVzLiBBIHNpbmdsZSBmaWxlIGlzIGVub3VnaFxufCBmb3IgbWFqb3JpdHkgb2YgcHJvamVjdHMsIGhvd2V2ZXIgeW91IGNhbiBkZWZpbmUgcm91dGVzIGluIGRpZmZlcmVudFxufCBmaWxlcyBhbmQganVzdCBtYWtlIHN1cmUgdG8gaW1wb3J0IHRoZW0gaW5zaWRlIHRoaXMgZmlsZS4gRm9yIGV4YW1wbGVcbnxcbnwgRGVmaW5lIHJvdXRlcyBpbiBmb2xsb3dpbmcgdHdvIGZpbGVzXG58IOKUnOKUgOKUgCBzdGFydC9yb3V0ZXMvY2FydC50c1xufCDilJzilIDilIAgc3RhcnQvcm91dGVzL2N1c3RvbWVyLnRzXG58XG58IGFuZCB0aGVuIGltcG9ydCB0aGVtIGluc2lkZSBgc3RhcnQvcm91dGVzLnRzYCBhcyBmb2xsb3dzXG58XG58IGltcG9ydCAnLi9yb3V0ZXMvY2FydCdcbnwgaW1wb3J0ICcuL3JvdXRlcy9jdXN0b21lcidcbnxcbiovXG5cbmltcG9ydCBSb3V0ZSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL1JvdXRlJ1xuXG5Sb3V0ZS5nZXQoJy8nLCBhc3luYyAoKSA9PiB7XG4gIHJldHVybiB7IGhlbGxvOiAnd29ybGQnIH1cbn0pXG5cblJvdXRlLnBvc3QoJy9hdXRoL3NpZ24tdXAnLCAnQXV0aENvbnRyb2xsZXIuc2lnblVwJylcblJvdXRlLnBvc3QoJy9hdXRoL3NpZ24taW4nLCAnQXV0aENvbnRyb2xsZXIuc2lnbkluJylcblJvdXRlLmdldCgnL2F1dGgvdmVyaWZ5LWVtYWlsJywgJ0F1dGhDb250cm9sbGVyLnZlcmlmeUVtYWlsJylcblJvdXRlLmdldCgnL2F1dGgvdmVyaWZ5LWRpc3BsYXktbmFtZScsICdBdXRoQ29udHJvbGxlci52ZXJpZnlEaXNwbGF5TmFtZScpXG5cblJvdXRlLmdldCgnL3Bvc3RzJywgJ1Bvc3RzQ29udHJvbGxlci5saXN0JylcblJvdXRlLmdldCgnL3Bvc3RzLzpzbHVnJywgJ1Bvc3RzQ29udHJvbGxlci5yZWFkJylcblJvdXRlLmdldCgnL3Bvc3RzLzpzbHVnL2NvbW1lbnRzJywgJ0NvbW1lbnRzQ29udHJvbGxlci5saXN0JylcblxuUm91dGUuZ2V0KCcvdXNlcnMvOmRpc3BsYXlOYW1lJywgJ1VzZXJzQ29udHJvbGxlci5saXN0JylcblJvdXRlLmdldCgnL3VzZXJzLzpkaXNwbGF5TmFtZS86c2x1ZycsICdVc2Vyc0NvbnRyb2xsZXIucmVhZCcpXG5cblxuXG5Sb3V0ZS5ncm91cCgoKSA9PiB7XG4gIFJvdXRlLmdldCgnL2F1dGgvdmVyaWZ5LXRva2VuJywgJ0F1dGhDb250cm9sbGVyLnZlcmlmeVRva2VuJylcbiAgUm91dGUuZ2V0KCcvbWUnLCAnTWVDb250cm9sbGVyLmdldFByb2ZsZScpXG4gIFJvdXRlLnBhdGNoKCcvbWUnLCAnTWVDb250cm9sbGVyLnVwZGF0ZVByb2ZsZScpXG4gIFJvdXRlLmRlbGV0ZSgnL21lJywgJ01lQ29udHJvbGxlci5sZWF2ZScpXG4gIFJvdXRlLmdldCgnL21lL3Bvc3RzJywgJ01lQ29udHJvbGxlci5nZXRQb3N0cycpXG4gIFJvdXRlLmdldCgnL21lL3Bvc3RzLzpzbHVnJywgJ01lQ29udHJvbGxlci5nZXRQb3N0JylcblxuXG4gIFJvdXRlLnBvc3QoJy9wb3N0cycsJ1Bvc3RzQ29udHJvbGxlci5jcmVhdGUnKVxuICBSb3V0ZS5wYXRjaCgnL3Bvc3RzLzpzbHVnJywnUG9zdHNDb250cm9sbGVyLnVwZGF0ZScpXG4gIFJvdXRlLmRlbGV0ZSgnL3Bvc3RzLzpzbHVnJywnUG9zdHNDb250cm9sbGVyLmRlbGV0ZScpXG5cbiAgUm91dGUucG9zdCgnL3Bvc3RzLzpzbHVnL2NvbW1lbnRzJywgJ0NvbW1lbnRzQ29udHJvbGxlci5jcmVhdGUnKVxuICBSb3V0ZS5wYXRjaCgnL3Bvc3RzLzpzbHVnL2NvbW1lbnRzLzppZCcsICdDb21tZW50c0NvbnRyb2xsZXIudXBkYXRlJylcbiAgUm91dGUuZGVsZXRlKCcvcG9zdHMvOnNsdWcvY29tbWVudHMvOmlkJywgJ0NvbW1lbnRzQ29udHJvbGxlci5kZWxldGUnKVxuICBSb3V0ZS5wYXRjaCgnL2NvbW1lbnRzLzppZCcsICdDb21tZW50c0NvbnRyb2xsZXIudXBkYXRlJykgLy8gc2hvdEN1dFxuICBSb3V0ZS5kZWxldGUoJy9jb21tZW50cy86aWQnLCAnQ29tbWVudHNDb250cm9sbGVyLmRlbGV0ZScpLy8gc2hvdEN1dFxuXG59KS5taWRkbGV3YXJlKCdhdXRoJylcblxuXG5cblxuIl19