"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Post_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Post"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const luxon_1 = require("luxon");
const tiny_uid_1 = __importDefault(require("tiny-uid"));
function createSlug(subject) {
    let slug = subject.trim().replace(/\s/gi, '-');
    if (slug.length > 27)
        slug = slug.substr(0, 28);
    slug = encodeURIComponent(slug);
    slug = slug += `-${tiny_uid_1.default()}`;
    return slug;
}
class PostsController {
    async list({ request }) {
        const { displayName, page, perPage } = request.qs();
        let query = Post_1.default.query()
            .preload('user')
            .where('publish_at', '<', luxon_1.DateTime.now().toISO())
            .orderBy('publish_at', 'desc');
        if (displayName) {
            const user = await User_1.default.findByOrFail('display_name', displayName);
            query = query.where('user_id', user.id);
        }
        const posts = await query.paginate(page || 1, perPage || 12);
        return posts;
    }
    async create({ auth, request }) {
        const subject = request.input('subject');
        const content = request.input('content');
        const userId = auth.user?.id;
        const publishAt = request.input('publishAt', luxon_1.DateTime.now().toISO());
        const slug = createSlug(subject);
        const post = await Post_1.default.create({
            userId,
            subject,
            content,
            slug,
            publishAt
        });
        return post;
    }
    async read({ params }) {
        const { slug } = params;
        const post = await Post_1.default.query()
            .preload('user')
            .preload('comments')
            .where('publish_at', '<=', luxon_1.DateTime.now().toISO())
            .where('slug', slug)
            .firstOrFail();
        return post;
    }
    async update({ bouncer, request, params }) {
        const { slug } = params;
        const post = await Post_1.default.findOrFail('slug', slug);
        await bouncer.with('PostPolicy').authorize('update', post);
        const subject = request.input('subject');
        const content = request.input('content');
        const publishAt = request.input('publichAt');
        if (subject) {
            if (post.subject !== subject) {
                post.slug = createSlug(subject);
            }
            post.subject = subject;
        }
        if (content)
            post.content = content;
        if (publishAt)
            post.publishAt = publishAt;
        return await post.save();
    }
    async delete({ bouncer, params }) {
        const { slug } = params;
        const post = await Post_1.default.findOrFail('slug', slug);
        await bouncer.with('PostPolicy').authorize('delete', post);
        await post.delete();
        return 'ok';
    }
}
exports.default = PostsController;
//# sourceMappingURL=data:application/json;base64,