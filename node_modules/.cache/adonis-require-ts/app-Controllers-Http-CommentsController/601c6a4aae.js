"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Comment_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Comment"));
const Post_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Post"));
class CommentsController {
    async list({ params }) {
        const { slug } = params;
        const post = await Post_1.default.findByOrFail('slug', slug);
        return await Comment_1.default.query()
            .preload('user')
            .preload('comments')
            .orderBy('created_at', 'asc')
            .where('post_id', post.id)
            .whereNull('parent_id')
            .exec();
    }
    async create({ auth, params, request }) {
        const { slug } = params;
        const content = request.input('content');
        const parentId = request.input('parentId');
        const post = await Post_1.default.findByOrFail('slug', slug);
        return await Comment_1.default.create({
            userId: auth.user?.id,
            postId: post.id,
            content,
            parentId
        });
    }
    async update({ bouncer, params, request }) {
        const { id } = params;
        const comment = await Comment_1.default.findOrFail(id);
        await bouncer.with('CommentPolicy').authorize('update', comment);
        const content = request.input('content');
        comment.content = content;
        await comment.save();
        return comment;
    }
    async delete({ bouncer, params }) {
        const { id } = params;
        const comment = await Comment_1.default.findOrFail(id);
        await bouncer.with('CommentPolicy').authorize('delete', comment);
        await comment.delete();
        return 'ok';
    }
}
exports.default = CommentsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWVudHNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ29tbWVudHNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsdUZBQXdDO0FBQ3hDLGlGQUFrQztBQUVsQyxNQUFxQixrQkFBa0I7SUFFbkMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFDLE1BQU0sRUFBdUI7UUFDckMsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHLE1BQU0sQ0FBQTtRQUNyQixNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ2xELE9BQU8sTUFBTSxpQkFBTyxDQUFDLEtBQUssRUFBRTthQUMzQixPQUFPLENBQUMsTUFBTSxDQUFDO2FBQ2YsT0FBTyxDQUFDLFVBQVUsQ0FBQzthQUNuQixPQUFPLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQzthQUM1QixLQUFLLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDekIsU0FBUyxDQUFDLFdBQVcsQ0FBQzthQUN0QixJQUFJLEVBQUUsQ0FBQTtJQUNYLENBQUM7SUFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUM7UUFDaEMsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHLE1BQU0sQ0FBQTtRQUNyQixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3hDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDMUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNsRCxPQUFPLE1BQU0saUJBQU8sQ0FBQyxNQUFNLENBQUM7WUFDeEIsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDZixPQUFPO1lBQ1AsUUFBUTtTQUNYLENBQUMsQ0FBQTtJQUVOLENBQUM7SUFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQXVCO1FBQ3pELE1BQU0sRUFBQyxFQUFFLEVBQUMsR0FBRyxNQUFNLENBQUE7UUFDbkIsTUFBTSxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM1QyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUVoRSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3hDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3pCLE1BQU0sT0FBTyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ3BCLE9BQU8sT0FBTyxDQUFBO0lBQ2xCLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBdUI7UUFDaEQsTUFBTSxFQUFDLEVBQUUsRUFBQyxHQUFHLE1BQU0sQ0FBQTtRQUNuQixNQUFNLE9BQU8sR0FBRyxNQUFNLGlCQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzVDLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ2hFLE1BQU0sT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ3RCLE9BQU8sSUFBSSxDQUFBO0lBRWYsQ0FBQztDQUVKO0FBOUNELHFDQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuXG5pbXBvcnQgQ29tbWVudCBmcm9tIFwiQXBwL01vZGVscy9Db21tZW50XCJcbmltcG9ydCBQb3N0IGZyb20gXCJBcHAvTW9kZWxzL1Bvc3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tZW50c0NvbnRyb2xsZXIge1xuXG4gICAgYXN5bmMgbGlzdCh7cGFyYW1zfSA6IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCB7c2x1Z30gPSBwYXJhbXNcbiAgICAgICAgY29uc3QgcG9zdCA9IGF3YWl0IFBvc3QuZmluZEJ5T3JGYWlsKCdzbHVnJywgc2x1ZylcbiAgICAgICAgcmV0dXJuIGF3YWl0IENvbW1lbnQucXVlcnkoKVxuICAgICAgICAucHJlbG9hZCgndXNlcicpXG4gICAgICAgIC5wcmVsb2FkKCdjb21tZW50cycpXG4gICAgICAgIC5vcmRlckJ5KCdjcmVhdGVkX2F0JywgJ2FzYycpXG4gICAgICAgIC53aGVyZSgncG9zdF9pZCcsIHBvc3QuaWQpXG4gICAgICAgIC53aGVyZU51bGwoJ3BhcmVudF9pZCcpXG4gICAgICAgIC5leGVjKClcbiAgICB9XG4gICAgYXN5bmMgY3JlYXRlKHthdXRoLCBwYXJhbXMsIHJlcXVlc3R9KXtcbiAgICAgICAgY29uc3Qge3NsdWd9ID0gcGFyYW1zXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSByZXF1ZXN0LmlucHV0KCdjb250ZW50JylcbiAgICAgICAgY29uc3QgcGFyZW50SWQgPSByZXF1ZXN0LmlucHV0KCdwYXJlbnRJZCcpXG4gICAgICAgIGNvbnN0IHBvc3QgPSBhd2FpdCBQb3N0LmZpbmRCeU9yRmFpbCgnc2x1ZycsIHNsdWcpXG4gICAgICAgIHJldHVybiBhd2FpdCBDb21tZW50LmNyZWF0ZSh7XG4gICAgICAgICAgICB1c2VySWQ6IGF1dGgudXNlcj8uaWQsXG4gICAgICAgICAgICBwb3N0SWQ6IHBvc3QuaWQsXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgcGFyZW50SWRcbiAgICAgICAgfSlcblxuICAgIH1cbiAgICBhc3luYyB1cGRhdGUoe2JvdW5jZXIsIHBhcmFtcywgcmVxdWVzdH0gOiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgY29uc3Qge2lkfSA9IHBhcmFtc1xuICAgICAgICBjb25zdCBjb21tZW50ID0gYXdhaXQgQ29tbWVudC5maW5kT3JGYWlsKGlkKVxuICAgICAgICBhd2FpdCBib3VuY2VyLndpdGgoJ0NvbW1lbnRQb2xpY3knKS5hdXRob3JpemUoJ3VwZGF0ZScsIGNvbW1lbnQpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb250ZW50ID0gcmVxdWVzdC5pbnB1dCgnY29udGVudCcpXG4gICAgICAgIGNvbW1lbnQuY29udGVudCA9IGNvbnRlbnRcbiAgICAgICAgYXdhaXQgY29tbWVudC5zYXZlKClcbiAgICAgICAgcmV0dXJuIGNvbW1lbnRcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGUoe2JvdW5jZXIsIHBhcmFtc30gOiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgY29uc3Qge2lkfSA9IHBhcmFtc1xuICAgICAgICBjb25zdCBjb21tZW50ID0gYXdhaXQgQ29tbWVudC5maW5kT3JGYWlsKGlkKVxuICAgICAgICBhd2FpdCBib3VuY2VyLndpdGgoJ0NvbW1lbnRQb2xpY3knKS5hdXRob3JpemUoJ2RlbGV0ZScsIGNvbW1lbnQpXG4gICAgICAgIGF3YWl0IGNvbW1lbnQuZGVsZXRlKClcbiAgICAgICAgcmV0dXJuICdvaydcblxuICAgIH1cblxufVxuIl19