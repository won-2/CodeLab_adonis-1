"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class AuthController {
    async signUp({ request }) {
        const params = request.only([
            'email',
            'password',
            'displayName',
            'name'
        ]);
        const user = await User_1.default.create(params);
        return user;
    }
    async signIn({ auth, request }) {
        const params = request.only([
            'email',
            'password'
        ]);
        const token = await auth.use('api').attempt(params.email, params.password);
        const user = await User_1.default.findByOrFail('email', params.email);
        return {
            user,
            token
        };
    }
    async verifyToken() {
        return 'ok';
    }
    async verifyEmail({ request, response }) {
        const { email } = request.qs();
        const exist = await User_1.default.findBy('email', email);
        if (exist) {
            response.status(409);
            return { massage: '이미 사용중인 이메일 입니다.' };
        }
        return 'ok';
    }
    async verifyDisplayName({ request, response }) {
        const { displayName } = request.qs();
        const exist = await User_1.default.findBy('displayName', displayName);
        if (exist) {
            response.status(409);
            return { massage: '이미 사용중인 닉네임 입니다.' };
        }
        return 'ok';
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGlGQUFrQztBQUVsQyxNQUFxQixjQUFjO0lBRS9CLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxPQUFPLEVBQXNCO1FBQ3ZDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDeEIsT0FBTztZQUNQLFVBQVU7WUFDVixhQUFhO1lBQ2IsTUFBTTtTQUNULENBQUMsQ0FBQTtRQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUV0QyxPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7SUFHRCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBdUI7UUFDOUMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztZQUN4QixPQUFPO1lBQ1AsVUFBVTtTQUNiLENBQUMsQ0FBQTtRQUNGLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDMUUsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDM0QsT0FBTztZQUNILElBQUk7WUFDSixLQUFLO1NBQ1IsQ0FBQTtJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFDO1FBQ2pDLE1BQU0sRUFBQyxLQUFLLEVBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUE7UUFDNUIsTUFBTSxLQUFLLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUMvQyxJQUFJLEtBQUssRUFBQztZQUNOLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDcEIsT0FBTyxFQUFDLE9BQU8sRUFBRyxrQkFBa0IsRUFBQyxDQUFBO1NBQ3hDO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRUQsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBQztRQUN2QyxNQUFNLEVBQUMsV0FBVyxFQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFBO1FBQ2xDLE1BQU0sS0FBSyxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDM0QsSUFBSSxLQUFLLEVBQUM7WUFDTixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3BCLE9BQU8sRUFBQyxPQUFPLEVBQUcsa0JBQWtCLEVBQUMsQ0FBQTtTQUN4QztRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztDQUVKO0FBcERELGlDQW9EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoQ29udHJvbGxlciB7XG4gICAgLy8gVG9kbyDrjbDsnbTthLAg7Jyg7Zqo7ISxIOqygOymnVxuICAgIGFzeW5jIHNpZ25VcCh7cmVxdWVzdH06IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCBwYXJhbXMgPSByZXF1ZXN0Lm9ubHkoW1xuICAgICAgICAgICAgJ2VtYWlsJyxcbiAgICAgICAgICAgICdwYXNzd29yZCcsXG4gICAgICAgICAgICAnZGlzcGxheU5hbWUnLFxuICAgICAgICAgICAgJ25hbWUnXG4gICAgICAgIF0pXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZShwYXJhbXMpXG5cbiAgICAgICAgcmV0dXJuIHVzZXJcbiAgICB9XG5cbiAgICAvLyBUb2RvIOuNsOydtO2EsCDsnKDtmqjshLEg6rKA7KadXG4gICAgYXN5bmMgc2lnbkluKHthdXRoLCByZXF1ZXN0fSA6IEh0dHBDb250ZXh0Q29udHJhY3QpeyAgICAgICAgXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHJlcXVlc3Qub25seShbXG4gICAgICAgICAgICAnZW1haWwnLFxuICAgICAgICAgICAgJ3Bhc3N3b3JkJ1xuICAgICAgICBdKVxuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdHRlbXB0KHBhcmFtcy5lbWFpbCwgcGFyYW1zLnBhc3N3b3JkKVxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlPckZhaWwoJ2VtYWlsJywgcGFyYW1zLmVtYWlsKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlcixcbiAgICAgICAgICAgIHRva2VuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB2ZXJpZnlUb2tlbigpe1xuICAgICAgICByZXR1cm4gJ29rJ1xuICAgIH1cblxuICAgIGFzeW5jIHZlcmlmeUVtYWlsKHtyZXF1ZXN0LCByZXNwb25zZX0pe1xuICAgICAgICBjb25zdCB7ZW1haWx9ID0gcmVxdWVzdC5xcygpXG4gICAgICAgIGNvbnN0IGV4aXN0ID0gYXdhaXQgVXNlci5maW5kQnkoJ2VtYWlsJywgZW1haWwpXG4gICAgICAgIGlmIChleGlzdCl7XG4gICAgICAgICAgICByZXNwb25zZS5zdGF0dXMoNDA5KVxuICAgICAgICAgICAgcmV0dXJuIHttYXNzYWdlIDogJ+ydtOuvuCDsgqzsmqnspJHsnbgg7J2066mU7J28IOyeheuLiOuLpC4nfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnb2snXG4gICAgfVxuXG4gICAgYXN5bmMgdmVyaWZ5RGlzcGxheU5hbWUoe3JlcXVlc3QsIHJlc3BvbnNlfSl7XG4gICAgICAgIGNvbnN0IHtkaXNwbGF5TmFtZX0gPSByZXF1ZXN0LnFzKClcbiAgICAgICAgY29uc3QgZXhpc3QgPSBhd2FpdCBVc2VyLmZpbmRCeSgnZGlzcGxheU5hbWUnLCBkaXNwbGF5TmFtZSlcbiAgICAgICAgaWYgKGV4aXN0KXtcbiAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cyg0MDkpXG4gICAgICAgICAgICByZXR1cm4ge21hc3NhZ2UgOiAn7J2066+4IOyCrOyaqeykkeyduCDri4nrhKTsnoQg7J6F64uI64ukLid9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdvaydcbiAgICB9XG5cbn1cbiJdfQ==