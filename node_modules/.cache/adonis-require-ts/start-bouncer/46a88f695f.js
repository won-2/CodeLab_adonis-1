"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.policies = exports.actions = void 0;
const Bouncer_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Addons/Bouncer"));
exports.actions = Bouncer_1.default.actions;
exports.policies = Bouncer_1.default.registerPolicies({
    PostPolicy: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Policies/PostPolicy'))),
    CommentPolicy: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Policies/CommentPolicy')))
}).policies;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvdW5jZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU9BLDBGQUFnRDtBQTBCakMsZUFBTyxHQUFLLGlCQUFPLFNBQUE7QUErQm5CLGdCQUFRLEdBQUssaUJBQU8sQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqRCxVQUFVLEVBQUUsR0FBRyxFQUFFLHlFQUFRLHlCQUF5QixHQUFDO0lBQ25ELGFBQWEsRUFBRSxHQUFHLEVBQUUseUVBQVEsNEJBQTRCLEdBQUM7Q0FDNUQsQ0FBQyxVQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb250cmFjdCBzb3VyY2U6IGh0dHBzOi8vZ2l0LmlvL0p0ZTNUXG4gKlxuICogRmVlbCBmcmVlIHRvIGxldCB1cyBrbm93IHZpYSBQUiwgaWYgeW91IGZpbmQgc29tZXRoaW5nIGJyb2tlbiBpbiB0aGlzIGNvbmZpZ1xuICogZmlsZS5cbiAqL1xuXG5pbXBvcnQgQm91bmNlciBmcm9tICdAaW9jOkFkb25pcy9BZGRvbnMvQm91bmNlcidcbmltcG9ydCBQb3N0IGZyb20gJ0FwcC9Nb2RlbHMvUG9zdCdcbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcblxuLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBCb3VuY2VyIEFjdGlvbnNcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufFxufCBBY3Rpb25zIGFsbG93cyB5b3UgdG8gc2VwYXJhdGUgeW91ciBhcHBsaWNhdGlvbiBidXNpbmVzcyBsb2dpYyBmcm9tIHRoZVxufCBhdXRob3JpemF0aW9uIGxvZ2ljLiBGZWVsIGZyZWUgdG8gbWFrZSB1c2Ugb2YgcG9saWNpZXMgd2hlbiB5b3UgZmluZFxufCB5b3Vyc2VsZiBjcmVhdGluZyB0b28gbWFueSBhY3Rpb25zXG58XG58IFlvdSBjYW4gZGVmaW5lIGFuIGFjdGlvbiB1c2luZyB0aGUgYC5kZWZpbmVgIG1ldGhvZCBvbiB0aGUgQm91bmNlciBvYmplY3RcbnwgYXMgc2hvd24gaW4gdGhlIGZvbGxvd2luZyBleGFtcGxlXG58XG58IGBgYFxufCBcdEJvdW5jZXIuZGVmaW5lKCdkZWxldGVQb3N0JywgKHVzZXI6IFVzZXIsIHBvc3Q6IFBvc3QpID0+IHtcbnxcdFx0XHRyZXR1cm4gcG9zdC51c2VyX2lkID09PSB1c2VyLmlkXG58IFx0fSlcbnwgYGBgXG58XG58KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxufCBOT1RFOiBBbHdheXMgZXhwb3J0IHRoZSBcImFjdGlvbnNcIiBjb25zdCBmcm9tIHRoaXMgZmlsZVxufCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiovXG5leHBvcnQgY29uc3QgeyBhY3Rpb25zIH0gPSBCb3VuY2VyXG4vLyAuZGVmaW5lKCdlZGl0UG9zdCcsICh1c2VyIDogVXNlciwgcG9zdCA6IFBvc3QpID0+IHtcbi8vICAgICByZXR1cm4gdXNlci5pZCA9PT0gcG9zdC51c2VySWRcbi8vIH0pXG4vLyAuZGVmaW5lKCdkZWxldGVQb3N0JywgKHVzZXIgOiBVc2VyLCBwb3N0IDogUG9zdCkgPT4ge1xuLy8gICAgIHJldHVybiB1c2VyLmlkID09PSBwb3N0LnVzZXJJZFxuLy8gfSlcblxuLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBCb3VuY2VyIFBvbGljaWVzXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnxcbnwgUG9saWNpZXMgYXJlIHNlbGYgY29udGFpbmVkIGFjdGlvbnMgZm9yIGEgZ2l2ZW4gcmVzb3VyY2UuIEZvciBleGFtcGxlOiBZb3VcbnwgY2FuIGNyZWF0ZSBhIHBvbGljeSBmb3IgYSBcIlVzZXJcIiByZXNvdXJjZSwgb25lIHBvbGljeSBmb3IgYSBcIlBvc3RcIiByZXNvdXJjZVxufCBhbmQgc28gb24uXG58XG58IFRoZSBcInJlZ2lzdGVyUG9saWNpZXNcIiBhY2NlcHRzIGEgdW5pcXVlIHBvbGljeSBuYW1lIGFuZCBhIGZ1bmN0aW9uIHRvIGxhenlcbnwgaW1wb3J0IHRoZSBwb2xpY3lcbnxcbnwgYGBgXG58IFx0Qm91bmNlci5yZWdpc3RlclBvbGljaWVzKHtcbnxcdFx0XHRVc2VyUG9saWN5OiAoKSA9PiBpbXBvcnQoJ0FwcC9Qb2xpY2llcy9Vc2VyJyksXG58IFx0XHRQb3N0UG9saWN5OiAoKSA9PiBpbXBvcnQoJ0FwcC9Qb2xpY2llcy9Qb3N0JylcbnwgXHR9KVxufCBgYGBcbnxcbnwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG58IE5PVEU6IEFsd2F5cyBleHBvcnQgdGhlIFwicG9saWNpZXNcIiBjb25zdCBmcm9tIHRoaXMgZmlsZVxufCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiovXG5leHBvcnQgY29uc3QgeyBwb2xpY2llcyB9ID0gQm91bmNlci5yZWdpc3RlclBvbGljaWVzKHtcbiAgICBQb3N0UG9saWN5OiAoKSA9PiBpbXBvcnQoJ0FwcC9Qb2xpY2llcy9Qb3N0UG9saWN5JyksXG4gICAgQ29tbWVudFBvbGljeTogKCkgPT4gaW1wb3J0KCdBcHAvUG9saWNpZXMvQ29tbWVudFBvbGljeScpXG59KVxuIl19