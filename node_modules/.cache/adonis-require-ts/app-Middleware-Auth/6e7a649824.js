"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const standalone_1 = require("@adonisjs/auth/build/standalone");
class AuthMiddleware {
    constructor() {
        this.redirectTo = '/login';
    }
    async authenticate(auth, guards) {
        let guardLastAttempted;
        for (let guard of guards) {
            guardLastAttempted = guard;
            if (await auth.use(guard).check()) {
                auth.defaultGuard = guard;
                return true;
            }
        }
        throw new standalone_1.AuthenticationException('Unauthorized access', 'E_UNAUTHORIZED_ACCESS', guardLastAttempted, this.redirectTo);
    }
    async handle({ auth }, next, customGuards) {
        const guards = customGuards.length ? customGuards : [auth.name];
        await this.authenticate(auth, guards);
        await next();
    }
}
exports.default = AuthMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxnRUFBeUU7QUFTekUsTUFBcUIsY0FBYztJQUFuQztRQUlZLGVBQVUsR0FBRyxRQUFRLENBQUE7SUF3RGpDLENBQUM7SUE5Q1csS0FBSyxDQUFDLFlBQVksQ0FBRSxJQUFpQyxFQUFFLE1BQTRCO1FBTzNGLElBQUksa0JBQXNDLENBQUE7UUFFMUMsS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsa0JBQWtCLEdBQUcsS0FBSyxDQUFBO1lBRTFCLElBQUksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQU1qQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQTtnQkFDekIsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO1FBS0QsTUFBTSxJQUFJLG9DQUF1QixDQUMvQixxQkFBcUIsRUFDckIsdUJBQXVCLEVBQ3ZCLGtCQUFrQixFQUNsQixJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFBO0lBQ0gsQ0FBQztJQUtNLEtBQUssQ0FBQyxNQUFNLENBQUUsRUFBRSxJQUFJLEVBQXVCLEVBQUUsSUFBeUIsRUFBRSxZQUFrQztRQUsvRyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9ELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDckMsTUFBTSxJQUFJLEVBQUUsQ0FBQTtJQUNkLENBQUM7Q0FDRjtBQTVERCxpQ0E0REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHdWFyZHNMaXN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQWRkb25zL0F1dGgnXG5pbXBvcnQgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uRXhjZXB0aW9uIH0gZnJvbSAnQGFkb25pc2pzL2F1dGgvYnVpbGQvc3RhbmRhbG9uZSdcblxuLyoqXG4gKiBBdXRoIG1pZGRsZXdhcmUgaXMgbWVhbnQgdG8gcmVzdHJpY3QgdW4tYXV0aGVudGljYXRlZCBhY2Nlc3MgdG8gYSBnaXZlbiByb3V0ZVxuICogb3IgYSBncm91cCBvZiByb3V0ZXMuXG4gKlxuICogWW91IG11c3QgcmVnaXN0ZXIgdGhpcyBtaWRkbGV3YXJlIGluc2lkZSBgc3RhcnQva2VybmVsLnRzYCBmaWxlIHVuZGVyIHRoZSBsaXN0XG4gKiBvZiBuYW1lZCBtaWRkbGV3YXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoTWlkZGxld2FyZSB7XG4gIC8qKlxuICAqIFRoZSBVUkwgdG8gcmVkaXJlY3QgdG8gd2hlbiByZXF1ZXN0IGlzIFVuYXV0aG9yaXplZFxuICAqL1xuICBwcm90ZWN0ZWQgcmVkaXJlY3RUbyA9ICcvbG9naW4nXG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpY2F0ZXMgdGhlIGN1cnJlbnQgSFRUUCByZXF1ZXN0IGFnYWluc3QgYSBjdXN0b20gc2V0IG9mIGRlZmluZWRcbiAgICogZ3VhcmRzLlxuICAgKlxuICAgKiBUaGUgYXV0aGVudGljYXRpb24gbG9vcCBzdG9wcyBhcyBzb29uIGFzIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0ZWQgdXNpbmcgYW55XG4gICAqIG9mIHRoZSBtZW50aW9uZWQgZ3VhcmRzIGFuZCB0aGF0IGd1YXJkIHdpbGwgYmUgdXNlZCBieSB0aGUgcmVzdCBvZiB0aGUgY29kZVxuICAgKiBkdXJpbmcgdGhlIGN1cnJlbnQgcmVxdWVzdC5cbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBhdXRoZW50aWNhdGUgKGF1dGg6IEh0dHBDb250ZXh0Q29udHJhY3RbJ2F1dGgnXSwgZ3VhcmRzOiAoa2V5b2YgR3VhcmRzTGlzdClbXSkge1xuICAgIC8qKlxuICAgICAqIEhvbGQgcmVmZXJlbmNlIHRvIHRoZSBndWFyZCBsYXN0IGF0dGVtcHRlZCB3aXRoaW4gdGhlIGZvciBsb29wLiBXZSBwYXNzXG4gICAgICogdGhlIHJlZmVyZW5jZSBvZiB0aGUgZ3VhcmQgdG8gdGhlIFwiQXV0aGVudGljYXRpb25FeGNlcHRpb25cIiwgc28gdGhhdFxuICAgICAqIGl0IGNhbiBkZWNpZGUgdGhlIGNvcnJlY3QgcmVzcG9uc2UgYmVoYXZpb3IgYmFzZWQgdXBvbiB0aGUgZ3VhcmRcbiAgICAgKiBkcml2ZXJcbiAgICAgKi9cbiAgICBsZXQgZ3VhcmRMYXN0QXR0ZW1wdGVkOiBzdHJpbmcgfCB1bmRlZmluZWRcblxuICAgIGZvciAobGV0IGd1YXJkIG9mIGd1YXJkcykge1xuICAgICAgZ3VhcmRMYXN0QXR0ZW1wdGVkID0gZ3VhcmRcblxuICAgICAgaWYgKGF3YWl0IGF1dGgudXNlKGd1YXJkKS5jaGVjaygpKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnN0cnVjdCBhdXRoIHRvIHVzZSB0aGUgZ2l2ZW4gZ3VhcmQgYXMgdGhlIGRlZmF1bHQgZ3VhcmQgZm9yXG4gICAgICAgICAqIHRoZSByZXN0IG9mIHRoZSByZXF1ZXN0LCBzaW5jZSB0aGUgdXNlciBhdXRoZW50aWNhdGVkXG4gICAgICAgICAqIHN1Y2NlZWRlZCBoZXJlXG4gICAgICAgICAqL1xuICAgICAgICBhdXRoLmRlZmF1bHRHdWFyZCA9IGd1YXJkXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSB1c2luZyBhbnkgZ3VhcmRcbiAgICAgKi9cbiAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FeGNlcHRpb24oXG4gICAgICAnVW5hdXRob3JpemVkIGFjY2VzcycsXG4gICAgICAnRV9VTkFVVEhPUklaRURfQUNDRVNTJyxcbiAgICAgIGd1YXJkTGFzdEF0dGVtcHRlZCxcbiAgICAgIHRoaXMucmVkaXJlY3RUbyxcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHJlcXVlc3RcbiAgICovXG4gIHB1YmxpYyBhc3luYyBoYW5kbGUgKHsgYXV0aCB9OiBIdHRwQ29udGV4dENvbnRyYWN0LCBuZXh0OiAoKSA9PiBQcm9taXNlPHZvaWQ+LCBjdXN0b21HdWFyZHM6IChrZXlvZiBHdWFyZHNMaXN0KVtdKSB7XG4gICAgLyoqXG4gICAgICogVXNlcyB0aGUgdXNlciBkZWZpbmVkIGd1YXJkcyBvciB0aGUgZGVmYXVsdCBndWFyZCBtZW50aW9uZWQgaW5cbiAgICAgKiB0aGUgY29uZmlnIGZpbGVcbiAgICAgKi9cbiAgICBjb25zdCBndWFyZHMgPSBjdXN0b21HdWFyZHMubGVuZ3RoID8gY3VzdG9tR3VhcmRzIDogW2F1dGgubmFtZV1cbiAgICBhd2FpdCB0aGlzLmF1dGhlbnRpY2F0ZShhdXRoLCBndWFyZHMpXG4gICAgYXdhaXQgbmV4dCgpXG4gIH1cbn1cbiJdfQ==