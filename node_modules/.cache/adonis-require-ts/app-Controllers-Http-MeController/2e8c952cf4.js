"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Post_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Post"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class MeController {
    async getProfle({ auth }) {
        return auth.user;
    }
    async updateProfle({ auth, request, response }) {
        const displayName = request.input('displayName');
        const name = request.input('name');
        const avatar = request.input('avatar');
        const params = {
            displayName,
            name,
            avatar,
        };
        if (displayName && displayName !== auth.user?.displayName) {
            const exist = await User_1.default.findBy('displayName', displayName);
            if (exist) {
                response.status(409);
                return { massage: '이미 사용중인 닉네임 입니다.' };
            }
        }
        auth.user?.merge(params);
        await auth.user?.save();
        return auth.user;
    }
    async leave({ auth }) {
        await auth.user?.delete();
        return 'ok';
    }
    async getPosts({ auth, request }) {
        const { page, perPage } = request.qs();
        return await Post_1.default.query().orderBy('publish_at', 'desc')
            .where('user_id', auth.user?.id)
            .paginate(page || 1, perPage || 12);
    }
    async getPost({ auth, params }) {
        const { slug } = params;
        return await Post_1.default.query().where('user_id', auth.user?.id)
            .where('slug', slug)
            .firstOrFail();
    }
}
exports.default = MeController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWVDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQWtDO0FBQ2xDLGlGQUFrQztBQUdsQyxNQUFxQixZQUFZO0lBQzdCLEtBQUssQ0FBQyxTQUFTLENBQUUsRUFBQyxJQUFJLEVBQXVCO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQTtJQUVwQixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBRSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUF1QjtRQUMvRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQ2hELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDbEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN0QyxNQUFNLE1BQU0sR0FBRztZQUNYLFdBQVc7WUFDWCxJQUFJO1lBQ0osTUFBTTtTQUNULENBQUE7UUFDRCxJQUFHLFdBQVcsSUFBSSxXQUFXLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUM7WUFDckQsTUFBTSxLQUFLLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQTtZQUMzRCxJQUFJLEtBQUssRUFBQztnQkFDTixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUNwQixPQUFPLEVBQUMsT0FBTyxFQUFHLGtCQUFrQixFQUFDLENBQUE7YUFDeEM7U0FDSjtRQUVELElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3hCLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQTtRQUN2QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDcEIsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLLENBQUUsRUFBQyxJQUFJLEVBQUM7UUFDZixNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUE7UUFDekIsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUM7UUFDMUIsTUFBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUE7UUFDckMsT0FBTyxNQUFNLGNBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQzthQUN0RCxLQUFLLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO2FBQy9CLFFBQVEsQ0FBRSxJQUFJLElBQUksQ0FBQyxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUV4QyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUM7UUFDeEIsTUFBSyxFQUFFLElBQUksRUFBQyxHQUFHLE1BQU0sQ0FBQTtRQUNyQixPQUFPLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7YUFDeEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7YUFDbkIsV0FBVyxFQUFFLENBQUE7SUFFbEIsQ0FBQztDQUlKO0FBbkRELCtCQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IFBvc3QgZnJvbSAnQXBwL01vZGVscy9Qb3N0J1xuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lQ29udHJvbGxlciB7XG4gICAgYXN5bmMgZ2V0UHJvZmxlKCB7YXV0aH0gOiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgcmV0dXJuIGF1dGgudXNlclxuXG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlUHJvZmxlKCB7YXV0aCwgcmVxdWVzdCwgcmVzcG9uc2V9IDogSHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gcmVxdWVzdC5pbnB1dCgnZGlzcGxheU5hbWUnKVxuICAgICAgICBjb25zdCBuYW1lID0gcmVxdWVzdC5pbnB1dCgnbmFtZScpXG4gICAgICAgIGNvbnN0IGF2YXRhciA9IHJlcXVlc3QuaW5wdXQoJ2F2YXRhcicpXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGF2YXRhcixcbiAgICAgICAgfVxuICAgICAgICBpZihkaXNwbGF5TmFtZSAmJiBkaXNwbGF5TmFtZSAhPT0gYXV0aC51c2VyPy5kaXNwbGF5TmFtZSl7XG4gICAgICAgICAgICBjb25zdCBleGlzdCA9IGF3YWl0IFVzZXIuZmluZEJ5KCdkaXNwbGF5TmFtZScsIGRpc3BsYXlOYW1lKVxuICAgICAgICAgICAgaWYgKGV4aXN0KXtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5zdGF0dXMoNDA5KSAvLyDstqnrj4xcbiAgICAgICAgICAgICAgICByZXR1cm4ge21hc3NhZ2UgOiAn7J2066+4IOyCrOyaqeykkeyduCDri4nrhKTsnoQg7J6F64uI64ukLid9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhdXRoLnVzZXI/Lm1lcmdlKHBhcmFtcylcbiAgICAgICAgYXdhaXQgYXV0aC51c2VyPy5zYXZlKClcbiAgICAgICAgcmV0dXJuIGF1dGgudXNlclxuICAgIH1cblxuICAgIGFzeW5jIGxlYXZlKCB7YXV0aH0gKXtcbiAgICAgICAgYXdhaXQgYXV0aC51c2VyPy5kZWxldGUoKVxuICAgICAgICByZXR1cm4gJ29rJ1xuICAgIH1cblxuICAgIGFzeW5jIGdldFBvc3RzKHthdXRoLCByZXF1ZXN0fSl7XG4gICAgICAgIGNvbnN0eyBwYWdlLCBwZXJQYWdlIH0gPSByZXF1ZXN0LnFzKClcbiAgICAgICAgcmV0dXJuIGF3YWl0IFBvc3QucXVlcnkoKS5vcmRlckJ5KCdwdWJsaXNoX2F0JywgJ2Rlc2MnKVxuICAgICAgICAud2hlcmUoJ3VzZXJfaWQnLCBhdXRoLnVzZXI/LmlkKVxuICAgICAgICAucGFnaW5hdGUoIHBhZ2UgfHwgMSwgcGVyUGFnZSB8fCAxMilcblxuICAgIH1cblxuICAgIGFzeW5jIGdldFBvc3Qoe2F1dGgsIHBhcmFtc30pe1xuICAgICAgICBjb25zdHsgc2x1Z30gPSBwYXJhbXNcbiAgICAgICAgcmV0dXJuIGF3YWl0IFBvc3QucXVlcnkoKS53aGVyZSgndXNlcl9pZCcsIGF1dGgudXNlcj8uaWQpXG4gICAgICAgIC53aGVyZSgnc2x1ZycsIHNsdWcpXG4gICAgICAgIC5maXJzdE9yRmFpbCgpXG5cbiAgICB9XG5cblxuXG59XG4iXX0=